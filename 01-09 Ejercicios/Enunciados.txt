Para reforzar los conceptos de **variables**, **tipos de datos**, **objetos**, **arreglos** y **funciones** de tu curso, aqu√≠ tienes cuatro ejercicios complejos que combinan estos temas. La clave es pensar en c√≥mo se interconectan las estructuras de datos con las funciones para resolver un problema.

-----

## Ejercicio 1: Gesti√≥n de una Tienda de Libros üìö

**Objetivo:** Crear un sistema simple para una tienda de libros, manejando el inventario, ventas y autores.

1.  **Crea una funci√≥n `crearLibro`** que acepte el `titulo`, `autor` (un objeto con `nombre` y `pais`), `precio` y `stock` como argumentos. La funci√≥n debe retornar un objeto con estas propiedades.
2.  **Crea un arreglo llamado `inventario`** y agrega al menos 4 libros usando la funci√≥n `crearLibro`.
3.  **Crea una funci√≥n `venderLibro`** que reciba el `titulo` del libro a vender y la `cantidad`. Esta funci√≥n debe:
      * Buscar el libro en el `inventario`.
      * Verificar si hay suficiente `stock`.
      * Si hay stock, decrementar la cantidad vendida del `stock` del libro y retornar un mensaje de √©xito con el total a pagar.
      * Si no hay stock, retornar un mensaje de error.
4.  **Crea una funci√≥n `buscarPorAutor`** que reciba el `nombre` del autor y retorne un nuevo arreglo con todos los libros de ese autor.

**Ejemplo de uso:**

```javascript
let inventario = [
  // ... libros creados con la funci√≥n
];

venderLibro("El Se√±or de los Anillos", 2); // Deber√≠a restar 2 del stock
console.log(buscarPorAutor("J.R.R. Tolkien")); // Deber√≠a mostrar todos sus libros
```

-----

## Ejercicio 2: Sistema de Citas M√©dicas ü©∫

**Objetivo:** Desarrollar un sistema para gestionar citas m√©dicas, combinando objetos y arreglos.

1.  **Define un objeto `paciente`** con propiedades como `nombre`, `edad`, y un arreglo `historialMedico` que inicialmente est√© vac√≠o.
2.  **Define un objeto `medico`** con `nombre`, `especialidad` y un arreglo `citas` que tambi√©n est√© vac√≠o.
3.  **Crea una funci√≥n `agendarCita`** que tome un objeto `medico`, un objeto `paciente`, una `fecha` y un `motivo`. La funci√≥n debe agregar un nuevo objeto `cita` (con `paciente`, `fecha` y `motivo`) al arreglo `citas` del `medico`.
4.  **Crea una funci√≥n `consultarHistorial`** que reciba un objeto `paciente` y un `medico`. La funci√≥n debe recorrer las citas del m√©dico y, si el paciente est√° en una de ellas, agregar un nuevo objeto (`{medico: medico.nombre, fecha: cita.fecha, motivo: cita.motivo}`) al `historialMedico` del paciente.

**Ejemplo de uso:**

```javascript
let drSmith = { nombre: "Dr. Smith", especialidad: "Cardi√≥logo", citas: [] };
let juan = { nombre: "Juan", edad: 45, historialMedico: [] };

agendarCita(drSmith, juan, "2025-12-25", "Dolor de pecho");

consultarHistorial(juan, drSmith);
console.log(juan.historialMedico);
```

-----

## Ejercicio 3: Calculadora de Estad√≠sticas para Arreglos üìà

**Objetivo:** Crear funciones que realicen c√°lculos estad√≠sticos sobre un arreglo de n√∫meros, combinando bucles y l√≥gica.

1.  **Crea una funci√≥n `calcularPromedio`** que reciba un arreglo de n√∫meros. La funci√≥n debe sumar todos los elementos y devolver el promedio. Si el arreglo est√° vac√≠o, debe retornar 0.
2.  **Crea una funci√≥n `encontrarExtremos`** que reciba un arreglo de n√∫meros. La funci√≥n debe devolver un objeto con las propiedades `minimo` y `maximo` con los valores correspondientes. Puedes usar un bucle `for` o `for...of`.
3.  **Crea una funci√≥n `contarParesImpares`** que reciba un arreglo de n√∫meros. La funci√≥n debe devolver un objeto con las propiedades `pares` e `impares`, conteniendo la cantidad de cada tipo.

**Ejemplo de uso:**

```javascript
let numeros = [5, 12, 3, 40, 8, 15];

console.log(calcularPromedio(numeros)); // Deber√≠a ser 13.83
console.log(encontrarExtremos(numeros)); // Deber√≠a ser { minimo: 3, maximo: 40 }
console.log(contarParesImpares(numeros)); // Deber√≠a ser { pares: 3, impares: 3 }
```

-----

## Ejercicio 4: Sistema de Inventario para un Videojuego üïπÔ∏è

**Objetivo:** Simular un sistema de inventario de un personaje en un videojuego usando objetos anidados y arreglos.

1.  **Crea una funci√≥n `crearItem`** que reciba un `nombre`, `tipo` (por ejemplo, "arma", "pocion", "armadura") y `stats` (un objeto con propiedades como `ataque`, `defensa`, `curacion`).
2.  **Crea un objeto `personaje`** con propiedades como `nombre`, `salud`, `ataque` y un arreglo vac√≠o llamado `inventario`.
3.  **Crea una funci√≥n `equiparItem`** que reciba el objeto `personaje` y un objeto `item`. La funci√≥n debe:
      * Agregar el `item` al arreglo `inventario` del personaje.
      * Aumentar las `stats` del personaje seg√∫n el tipo de `item`. Por ejemplo, si es un arma, sumar el `ataque` del `item` al `ataque` del personaje. Si es una poci√≥n, sumar la `curacion` a la `salud` del personaje.
4.  **Crea una funci√≥n `mostrarInventario`** que reciba el objeto `personaje` y recorra su `inventario` para mostrar una lista de los items que tiene.

**Ejemplo de uso:**

```javascript
let link = { nombre: "Link", salud: 100, ataque: 10, inventario: [] };

let espada = crearItem("Espada Maestra", "arma", { ataque: 30 });
let pocion = crearItem("Poci√≥n de vida", "pocion", { curacion: 50 });

equiparItem(link, espada);
equiparItem(link, pocion);

console.log(link); // El ataque y la salud de Link deben haber aumentado
mostrarInventario(link);
```